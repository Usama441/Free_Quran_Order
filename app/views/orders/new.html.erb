<% content_for :title, "Order a Free Quran" %>

<!-- Flash Messages Container -->
<div id="flash-messages" class="max-w-6xl mx-auto mt-4 px-6 hidden">
  <div id="flash-container"></div>
</div>

<!-- Main Section -->
<section class="max-w-6xl mx-auto px-6 py-12 grid grid-cols-1 lg:grid-cols-3 gap-10">
  <!-- Left: Order Form -->
  <div class="lg:col-span-2 bg-white shadow-lg rounded-2xl p-8 space-y-6">
    <h2 class="text-2xl font-bold text-green-700 mb-4 text-center">Order Your Free Quran</h2>

    <form id="order-form" class="space-y-6">
      <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
<% if maintenance_mode? %>
  <!-- Maintenance mode message - already handled by before_action -->

      <% elsif @daily_order_info[:limit_reached] %>
  <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
    <p class="font-bold">Daily Order Limit Reached</p>
    <p>We've received <%= @daily_order_info[:today_count] %> orders today and have reached our daily limit of <%= @daily_order_info[:daily_limit] %>. Please try again tomorrow.</p>
  </div>
<% else %>
<% if debug_mode? %>
    <div class="bg-purple-100 border border-purple-400 text-purple-700 px-4 py-3 rounded mb-4">
      <p class="font-bold">üîç Debug Information</p>
      <p class="text-sm">Daily Orders: <%= @daily_order_info[:today_count] %> / <%= @daily_order_info[:daily_limit] %></p>
      <p class="text-sm">Maintenance Mode: <%= maintenance_mode? ? 'Active' : 'Inactive' %></p>
      <p class="text-sm">Default Translation: <%= default_translation %></p>
    </div>
  <% end %>
  <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-6">
    <p class="font-bold">Order Availability</p>
    <p>Today: <%= @daily_order_info[:today_count] %> orders received (<%= @daily_order_info[:remaining] %> remaining of <%= @daily_order_info[:daily_limit] %> daily limit)</p>
  </div>
<% end %>
      <!-- üîπ Quran ID must be inside the form -->
      <%= hidden_field_tag 'order[quran_id]', @quran&.id %>

      <!-- Dynamic Error Container -->
      <div id="form-errors" class="hidden bg-red-50 border border-red-200 rounded-lg p-4">
        <h3 class="text-red-800 font-semibold mb-2">Please fix the following errors:</h3>
        <ul id="error-list" class="list-disc list-inside text-red-700"></ul>
      </div>

      <!-- Full Name -->
      <div class="form-group">
        <label for="full_name" class="block font-semibold mb-2">Full Name *</label>
        <input type="text" id="full_name" name="order[full_name]" placeholder="Your Full Name"
               class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none"
               required>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>

      <!-- Phone with Country Code -->
      <div class="form-group">
        <label class="block font-semibold mb-2">Phone Number *</label>
        <div class="flex space-x-2">
          <div class="w-2/5">
            <select id="country_code_select" name="order[country_code]" class="w-full border border-gray-300 rounded-lg px-3 py-3 focus:ring-2 focus:ring-green-500 outline-none" onchange="updatePhoneFormat(); updateStates()" required>
              <!-- Countries will be populated by JavaScript -->
            </select>
          </div>
          <div class="w-3/5">
            <input type="tel" id="phone_input" name="order[phone]" placeholder="300 1234567"
                   class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none" required>
          </div>
        </div>
        <p class="text-sm text-gray-600 mt-1" id="phone_format_hint">Format: 300 1234567</p>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>
    
      <!-- Email -->
      <div class="form-group">
        <label for="email" class="block font-semibold mb-2">Email *</label>
        <input type="email" id="email" name="order[email]" placeholder="Your Email Address"
               class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none" required>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>
    
      <!-- State / Province -->
      <div class="form-group">
        <label for="state" class="block font-semibold mb-2">State / Province *</label>
        <select id="state_select" name="order[state]" class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none" required>
          <option value="">Select State/Province</option>
        </select>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>

      <!-- City -->
      <div class="form-group">
        <label for="city" class="block font-semibold mb-2">City *</label>
        <input type="text" id="city" name="order[city]" placeholder="Your City"
               class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none" required>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>

      <!-- Postal Code -->
      <div class="form-group">
        <label for="postal_code" class="block font-semibold mb-2">Postal Code *</label>
        <input type="text" id="postal_code" name="order[postal_code]" placeholder="e.g. 54000"
               class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none" required>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>

      <!-- Street Address -->
      <div class="form-group">
        <label for="address" class="block font-semibold mb-2">Street Address *</label>
        <textarea id="address" name="order[address]" rows="2" placeholder="House #, Street, Area"
                  class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none" required></textarea>
        <div class="error-message hidden text-red-500 text-sm mt-1"></div>
      </div>

      <!-- Hidden fields for quantity and translation -->
      <input type="hidden" id="quantity_field" name="order[quantity]" value="1">
      <input type="hidden" id="translation_field" name="order[translation]" value="english">

      <!-- Special Note -->
      <div>
        <label for="note" class="block font-semibold mb-2">Special Note (optional)</label>
        <textarea id="note" name="order[note]" rows="2" placeholder="Any special instructions or language preference..."
                  class="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 outline-none"></textarea>
      </div>

      <!-- Submit -->
      <div class="text-center pt-4">
        <button type="submit"
                class="bg-green-700 text-white font-semibold px-8 py-3 rounded-lg hover:bg-green-800 transition cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                id="submit-btn">
          <span id="submit-text">Submit Order</span>
          <span id="loading-text" class="hidden">Submitting...</span>
        </button>
      </div>
    </form>
  </div>

  <!-- Right: Product Details -->
  <div class="bg-green-50 shadow-md rounded-2xl p-6 h-fit border border-green-100">
    <% if @quran && @quran.images.attached? %>
      <%= image_tag @quran.images.first, alt: @quran.title, class: "rounded-xl mb-4 w-full h-40 object-cover" %>
    <% else %>
      <img src="https://upload.wikimedia.org/wikipedia/commons/6/6d/Quran_book.jpg"
           alt="<%= @order.title || 'Quran' %>" class="rounded-xl mb-4 w-full h-40 object-cover">
    <% end %>

    <ul class="list-disc list-inside text-gray-700 text-sm mb-6 space-y-1" id="translation_details">
      <% if @quran %>
        <li><span class="font-semibold text-gray-800">Pages:</span> <%= @quran.pages %></li>
        <li><span class="font-semibold text-gray-800">Translator:</span> <%= @quran.writer %></li>
        <li><span class="font-semibold text-gray-800">Language:</span> <%= @quran.translation.capitalize %></li>
        <li><span class="font-semibold text-gray-800">Stock:</span> <%= @quran.stock %></li>
        <li><span class="font-semibold text-gray-800">Binding:</span> Softcover Edition</li>
      <% else %>
        <li><span class="font-semibold text-gray-800">Pages:</span> 604</li>
        <li><span class="font-semibold text-gray-800">Translator:</span> Abdullah Yusuf Ali</li>
        <li><span class="font-semibold text-gray-800">Language:</span> English</li>
        <li><span class="font-semibold text-gray-800">Binding:</span> Softcover Edition</li>
        <li><span class="font-semibold text-gray-800">Publisher:</span> Islamic Publications Lahore</li>
      <% end %>
    </ul>

    <!-- Quantity -->
    <div class="flex items-center justify-between mb-4">
      <span class="font-semibold text-gray-700">Quantity:</span>
      <div class="flex items-center border border-gray-300 rounded-lg overflow-hidden">
        <button type="button" onclick="decreaseQty()" class="bg-gray-200 hover:bg-gray-300 px-3 py-1 text-lg font-bold">‚àí</button>
        <input id="quantity_display" type="number" value="1" min="1" max="<%= @quran&.stock || 10 %>"
               class="w-14 text-center border-x border-gray-300 focus:outline-none" readonly>
        <button type="button" onclick="increaseQty()" class="bg-gray-200 hover:bg-gray-300 px-3 py-1 text-lg font-bold">+</button>
      </div>
    </div>

    <% unless @quran %>
      <div class="flex flex-col">
        <label class="font-semibold text-gray-700 mb-2">Select Translation:</label>
        <select id="translation_select" name="order[translation]" class="border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-500 outline-none" onchange="updateTranslationInfo()">
          <option value="english" <%= 'selected' if @order.translation == 'english' %>>English</option>
          <option value="urdu" <%= 'selected' if @order.translation == 'urdu' %>>Urdu</option>
          <option value="french" <%= 'selected' if @order.translation == 'french' %>>French</option>
          <option value="spanish" <%= 'selected' if @order.translation == 'spanish' %>>Spanish</option>
        </select>
      </div>
    <% end %>
  </div>
</section>


<% content_for :page_scripts do %>

<!-- Country and State Data from Rails -->
<script>
    // Initialize data
    const countriesData = <%= raw @countries_data.to_json %>;
    const phoneFormatsData = <%= raw @phone_formats.to_json %>;
</script>

<!-- Ajax Order Submission Script -->
<script>
    // Country states data (comprehensive for major countries)
    const statesData = {
        'US': ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],
        'CA': ['Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia', 'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan', 'Yukon'],
        'GB': ['England', 'Scotland', 'Wales', 'Northern Ireland'],
        'PK': ['Punjab', 'Sindh', 'Khyber Pakhtunkhwa', 'Balochistan', 'Gilgit-Baltistan', 'Azad Jammu and Kashmir', 'Islamabad Capital Territory'],
        'IN': ['Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'],
        'BD': ['Dhaka', 'Chittagong', 'Khulna', 'Rajshahi', 'Barisal', 'Sylhet', 'Rangpur', 'Mymensingh'],
        'LK': ['Central Province', 'Eastern Province', 'North Central Province', 'Northern Province', 'North Western Province', 'Sabaragamuwa Province', 'Southern Province', 'Uva Province', 'Western Province'],
        'NP': ['Province No. 1', 'Madhesh Province', 'Bagmati Province', 'Gandaki Province', 'Lumbini Province', 'Karnali Province', 'Sudurpashchim Province'],
        'AF': ['Kabul', 'Nangarhar', 'Herat', 'Balkh', 'Kandahar', 'Takhar', 'Kunduz', 'Badakhshan', 'Helmand', 'Ghazni', 'Kunarha', 'Paktia', 'Panjsher', 'Laghman', 'Farah', 'Daikundi', 'Nimruz', 'Wardak', 'Jowzjan', 'Samangan', 'Paktiya', 'Zabul', 'Khost', 'Logar', 'Urozgan', 'Sarah', 'Paktya', 'Badghis', 'Faryab', 'Kapisa', 'Nuristan'],
        'IR': ['Tehran', 'Isfahan', 'Fars', 'Khuzestan', 'East Azerbaijan', 'Mazandaran', 'GilƒÅn', 'West Azerbaijan', 'Razavi Khorasan', 'Hamedan', 'Kerman', 'Mazandaran', 'Yazd', 'Qom', 'Lorestan', 'Free Zone', 'Chaharmahal and Bakhtiari', 'Kohgiluyeh and Boyer-Ahmad', 'Sistan and Baluchestan', 'North Khorasan', 'South Khorasan', 'Alborz', 'Ilam', 'Bushehr', 'Zanjan', 'Semnan', 'Zanjan', 'Ardabil', 'Qazvin'],
        'BT': ['Thimphu', 'Paro', 'Punakha', 'Wangdue Phodrang', 'Trongsa', 'Jakar', 'Pemagatshel', 'Samdrup Jongkhar', 'Trashigang', 'Trashiyangtse', 'Mongar', 'Zhemgang', 'Samtse', 'Sarpang', 'Dagana', 'Chukha', 'Ha', 'Lhuntse', 'Gasa', 'Yangtse'],
        'MV': ['Mal√©', 'Addu', 'Fuvahmulak', 'Mulaku', 'Haa Alifu', 'Haa Dhaalu', 'Shaviyani', 'Noonu', 'Raa', 'Baa', 'Lhaviyani', 'Kaafu', 'Alifu Alifu', 'Alifu Dhaalu', 'Vaavu', 'Meemu', 'Faafu', 'Dhaalu', 'Thaa', 'Laamu', 'Gaafu Alifu', 'Gaafu Dhaalu', 'Gnaviyani']
    };

    // Function to populate countries dropdown
    function populateCountries() {
        const countrySelect = document.getElementById('country_code_select');
        countrySelect.innerHTML = '<option value="">Select Country</option>';

        countriesData.forEach(country => {
            const option = document.createElement('option');
            option.value = country.calling_code;
            option.textContent = `${country.flag} ${country.name} ${country.calling_code}`;
            option.dataset.code = country.code;
            countrySelect.appendChild(option);
        });
    }

    // Function to update states based on selected country
    function updateStates() {
        const countrySelect = document.getElementById('country_code_select');
        const stateSelect = document.getElementById('state_select');
        const selectedCountryCode = countrySelect.value;

        // Find country data
        let selectedCountry = null;
        const selectedOption = countrySelect.querySelector(`option[value="${selectedCountryCode}"]`);
        if (selectedOption) {
            const countryCode = selectedOption.dataset.code;
            selectedCountry = countriesData.find(c => c.code === countryCode);
        }

        // Clear current states
        stateSelect.innerHTML = '<option value="">Select State/Province</option>';

        if (selectedCountry && statesData[selectedCountry.code]) {
            statesData[selectedCountry.code].forEach(state => {
                const option = document.createElement('option');
                option.value = state;
                option.textContent = state;
                stateSelect.appendChild(option);
            });
        } else {
            // For countries without state data or when no country selected
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'N/A';
            stateSelect.appendChild(option);
        }
    }

    // Phone format configurations (kept for compatibility)
    const phoneFormats = {
        '+92': { placeholder: '300 1234567', format: 'XXX XXXXXXX', hint: 'Format: 300 1234567' },
        '+1': { placeholder: '(555) 123-4567', format: '(XXX) XXX-XXXX', hint: 'Format: (555) 123-4567' },
        '+44': { placeholder: '7911 123456', format: 'XXXX XXXXXX', hint: 'Format: 7911 123456' },
        '+971': { placeholder: '50 123 4567', format: 'XX XXX XXXX', hint: 'Format: 50 123 4567' },
        '+966': { placeholder: '55 123 4567', format: 'XX XXX XXXX', hint: 'Format: 55 123 4567' },
        '+973': { placeholder: '3600 1234', format: 'XXXX XXXX', hint: 'Format: 3600 1234' },
        '+974': { placeholder: '3312 3456', format: 'XXXX XXXX', hint: 'Format: 3312 3456' },
        '+968': { placeholder: '9212 3456', format: 'XXXX XXXX', hint: 'Format: 9212 3456' },
        '+965': { placeholder: '500 12345', format: 'XXX XXXXX', hint: 'Format: 500 12345' },
        '+20': { placeholder: '10 1234 5678', format: 'XX XXXX XXXX', hint: 'Format: 10 1234 5678' },
        '+91': { placeholder: '98765 43210', format: 'XXXXX XXXXX', hint: 'Format: 98765 43210' },
        '+93': { placeholder: '70 123 4567', format: 'XX XXX XXXX', hint: 'Format: 70 123 4567' },
        '+98': { placeholder: '912 345 6789', format: 'XXX XXX XXXX', hint: 'Format: 912 345 6789' },
        '+960': { placeholder: '771 2345', format: 'XXX XXXX', hint: 'Format: 771 2345' }
    };

    function updatePhoneFormat() {
        const countrySelect = document.getElementById('country_code_select');
        const phoneInput = document.getElementById('phone_input');
        const formatHint = document.getElementById('phone_format_hint');

        const selectedCode = countrySelect.value;
        const formatConfig = phoneFormats[selectedCode];

        if (formatConfig) {
            phoneInput.placeholder = formatConfig.placeholder;
            formatHint.textContent = formatConfig.hint;
            // Clear the phone input when country changes
            phoneInput.value = '';
        }
    }

    function increaseQty() {
        const qtyDisplay = document.getElementById('quantity_display');
        const qtyField = document.getElementById('quantity_field');

        const maxStock = parseInt(qtyDisplay.max) || 10;
        const newValue = parseInt(qtyDisplay.value) + 1;

        if (newValue <= maxStock) {
          qtyDisplay.value = newValue;
          qtyField.value = newValue;
        }
    }

    function decreaseQty() {
        const qtyDisplay = document.getElementById('quantity_display');
        const qtyField = document.getElementById('quantity_field');
        const currentValue = parseInt(qtyDisplay.value);
        if (currentValue > 1) {
            qtyDisplay.value = currentValue - 1;
            qtyField.value = currentValue - 1;
        }
    }

    function updateTranslationInfo() {
        const translationSelect = document.getElementById('translation_select');
        const translationField = document.querySelector('input[name="order[translation]"]');
        const detailsList = document.getElementById('translation_details');

        // const selectedTranslation = translationSelect.value;
        // translationField.value = selectedTranslation;
        if (translationSelect && translationField) {
    translationField.value = translationSelect.value;
  }

        const data = {
            english: {
                pages: 604,
                translator: "Abdullah Yusuf Ali",
                binding: "Softcover Edition",
                publisher: "Islamic Publications Lahore",
            },
            urdu: {
                pages: 620,
                translator: "Maulana Fateh Muhammad Jalandhari",
                binding: "Hardcover Edition",
                publisher: "Darussalam Publishers",
            },
            french: {
                pages: 590,
                translator: "Muhammad Hamidullah",
                binding: "Softcover Edition",
                publisher: "Paris Islamic Center",
            },
            spanish: {
                pages: 605,
                translator: "Julio Cort√©s",
                binding: "Softcover Edition",
                publisher: "Islamic Foundation Madrid",
            },
        };

        const selected = data[selectedTranslation];
        detailsList.innerHTML = `
            <li><span class="font-semibold">Pages:</span> ${selected.pages}</li>
            <li><span class="font-semibold">Translator:</span> ${selected.translator}</li>
            <li><span class="font-semibold">Binding:</span> ${selected.binding}</li>
            <li><span class="font-semibold">Publisher:</span> ${selected.publisher}</li>
        `;
    }

    // Show flash message dynamically
    function showFlashMessage(type, message) {
        const flashContainer = document.getElementById('flash-container');
        const flashMessages = document.getElementById('flash-messages');

        flashContainer.innerHTML = `
            <div class="bg-${type == 'success' ? 'green' : 'red'}-100 border border-${type == 'success' ? 'green' : 'red'}-400 text-${type == 'success' ? 'green' : 'red'}-700 px-4 py-3 rounded">
                ${message}
            </div>
        `;
        flashMessages.classList.remove('hidden');

        // Auto-hide after 5 seconds
        setTimeout(() => {
            flashMessages.classList.add('hidden');
        }, 5000);
    }

    // Show form errors
    function showFormErrors(errors) {
        // Clear previous errors
        document.querySelectorAll('.form-group .error-message').forEach(el => {
            el.classList.add('hidden');
            el.textContent = '';
        });
        document.querySelectorAll('.form-group input, .form-group textarea, .form-group select').forEach(el => {
            el.classList.remove('border-red-500');
        });

        const generalErrors = document.getElementById('form-errors');
        const errorList = document.getElementById('error-list');

        generalErrors.classList.add('hidden');
        errorList.innerHTML = '';

        if (errors && errors.length > 0) {
            errors.forEach(error => {
                // Try to find the specific field
                const fieldMap = {
                    'full_name': 'full_name',
                    'email': 'email',
                    'phone': 'phone_input',
                    'city': 'city',
                    'state': 'state',
                    'postal_code': 'postal_code',
                    'address': 'address',
                    'country_code': 'country_code_select'
                };

                let fieldFound = false;
                Object.keys(fieldMap).forEach(key => {
                    if (error.toLowerCase().includes(key.replace('_', ' '))) {
                        const element = document.getElementById(fieldMap[key]);
                        if (element) {
                            const errorEl = element.closest('.form-group').querySelector('.error-message');
                            if (errorEl) {
                                errorEl.textContent = error;
                                errorEl.classList.remove('hidden');
                                element.classList.add('border-red-500');
                                fieldFound = true;
                            }
                        }
                    }
                });

                if (!fieldFound) {
                    // Add to general errors
                    const li = document.createElement('li');
                    li.textContent = error;
                    errorList.appendChild(li);
                    generalErrors.classList.remove('hidden');
                }
            });
        }
    }

    // Handle form submission via AJAX
    document.getElementById('order-form').addEventListener('submit', function(e) {
        e.preventDefault();

        const submitBtn = document.getElementById('submit-btn');
        const submitText = document.getElementById('submit-text');
        const loadingText = document.getElementById('loading-text');

        // Disable button and show loading
        submitBtn.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');

        // Collect form data
        const formData = new FormData(this);
        
        // Send AJAX request
        fetch('/orders.json', {
            method: 'POST',
            headers: {
                'X-CSRF-Token': document.querySelector('[name="authenticity_token"]').value,
                'Accept': 'application/json'
            },
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Success - redirect to thank you page
                showFlashMessage('success', data.message);
                window.location.href = '/orders/create';
            } else {
                // Validation errors
                showFormErrors(data.errors);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showFlashMessage('error', 'An error occurred. Please try again.');
        })
        .finally(() => {
            // Re-enable button
            submitBtn.disabled = false;
            submitText.classList.remove('hidden');
            loadingText.classList.add('hidden');
        });
    });

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('quantity_field').value = 1;
        document.getElementById('translation_field').value = 'english';
        populateCountries(); // Populate countries dropdown
        updatePhoneFormat(); // Set initial phone format
    });
</script>

<%end%>
